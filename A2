import subprocess
from pathlib import Path
import os

DEVICE_IDS = ["5701S00153", "5701S00161"]
REMOTE_PATH = "/sdcard/tnfsserver/gpsData"
LOCAL_BASE_PATH = "/home/pi/Downloads/NAV8"
EXTENSION = ".t0x"


def check_device(device_id: str) -> bool:
    """Check if the specified device is connected and authorized."""
    result = subprocess.run(["adb", "devices"], capture_output=True, text=True)
    if device_id in result.stdout and "unauthorized" not in result.stdout:
        return True
    else:
        return False


def handle_download(device_id: str, remote_path: str, local_path: str, extension: str) -> None:
    """Download all files with the specified extension from the remote path on the device to the local path."""
    if check_device(device_id):
        list_files_command = f"adb -s {device_id} shell \"find {remote_path} -type f -name '*{extension}'\""
        result = subprocess.run(list_files_command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            files = result.stdout.splitlines()
            for file in files:
                filename = os.path.basename(file)
                local_file_path = os.path.join(local_path, filename)
                download_command = f'adb -s {device_id} pull "{file}" "{local_file_path}"'
                download_result = subprocess.run(download_command, shell=True, capture_output=True, text=True)
                if download_result.returncode == 0:
                    print(f"Downloaded {file} to {local_file_path}")
                else:
                    print(f"Failed to download {file}: {download_result.stderr}")
        else:
            print(f"Failed to list files: {result.stderr}")
    else:
        print(f"Device {device_id} is not ready.")


def main() -> None:
    print("---- DOWNLOAD-RXFILES started! ----")

    for device_id in DEVICE_IDS:
        # Create a separate directory for each device
        local_device_path = Path(LOCAL_BASE_PATH) / device_id
        local_device_path.mkdir(parents=True, exist_ok=True)

        print(f"Processing device: {device_id}")
        handle_download(device_id, REMOTE_PATH, str(local_device_path), EXTENSION)

    print("---- Script finished. ----")


if __name__ == "__main__":
    main()
